from dataclasses import dataclass
from typing import Tuple, List, Dict, Union, Set, NewType, Any

CorrectionSuggestion = NewType('CorrectionSuggestion', str)
FeatureType = NewType('FeatureType', str)
Suggestions = NewType('Suggestions', List[Dict[CorrectionSuggestion, Dict[FeatureType, Any]]])


@dataclass
class LegacyValueSuggestions:
    """A class to hold the suggestions generated by the Value Feature-Generator."""
    cell: Tuple[int, int]
    suggestions: Suggestions

    @property
    def identity_suggestions(self) -> List[Dict[str, Suggestions]]:
        return [self.suggestions[0], self.suggestions[2], self.suggestions[4], self.suggestions[6]]

    @property
    def n_identity_suggestions(self) -> int:
        return sum([len(suggestions) for suggestions in self.identity_suggestions])

    @property
    def unicode_suggestions(self) -> List[Dict[str, Suggestions]]:
        return [self.suggestions[1], self.suggestions[3], self.suggestions[5], self.suggestions[7]]

    @property
    def n_unicode_suggestions(self) -> int:
        return sum([len(suggestions) for suggestions in self.unicode_suggestions])

    @property
    def unique_identity_suggestions(self) -> Set[str]:
        return {s for suggestion in self.identity_suggestions for s in suggestion.keys()}

    @property
    def unique_unicode_suggestions(self) -> Set[str]:
        return {s for suggestion in self.unicode_suggestions for s in suggestion.keys()}

    def certain_model_type_indices_and_suggestions(self, feature: str) -> Tuple[List[int], List[str]]:
        """Index of model types that make a certain suggestion."""
        indices = []
        certain_suggestions = []
        for i, model_suggestions in enumerate(self.suggestions):
            for suggestion, features in model_suggestions.items():
                if features[feature] == 1:
                    indices.append(i)
                    certain_suggestions.append(suggestion)
        return indices, certain_suggestions

    def n_certain_suggestions(self, feature: str) -> int:
        """Number of suggestions with probability 1.0"""
        return sum([1 for model_suggestions in self.suggestions for features in model_suggestions.values() if features[feature] == 1])

    def get_certain_suggestions(self, feature: str) -> List:
        """Return all certain suggestions."""
        return [s for model_suggestions in self.suggestions for s, features in model_suggestions.items() if features[feature] == 1]

    def n_certain_unicode_suggestions(self, feature: str) -> int:
        """Number of unicode suggestions with probability 1.0"""
        return sum([1 for model_suggestions in self.unicode_suggestions for features in model_suggestions.values() if features[feature] == 1])

    def n_certain_identity_suggestions(self, feature: str) -> int:
        """Number of identity suggestions with probability 1.0"""
        return sum([1 for model_suggestions in self.identity_suggestions for features in model_suggestions.values() if features[feature] == 1])

    def rule_based_suggestion_v4(self) -> Union[str, None]:
        choice = None
        threshold = 3
        if self.n_certain_suggestions('encoded_string_frequency') == 0:  # No certain suggestion at all.
            return choice

        if self.n_certain_suggestions('encoded_string_frequency') == 1:  # Use the one certain suggestion, if it was generated from >= 3 user inputs.
            choices = [suggestion for model_suggestions in self.suggestions for suggestion, features in model_suggestions.items() if features['encoded_string_frequency'] == 1 and len(features['error_cells']) >= threshold]
            if len(choices) == 1:
                choice = choices[0]

        elif self.n_certain_unicode_suggestions('encoded_string_frequency') == 1:  #  Use the one certain unicode-encoded suggestion, if it was generated from >= inputs.
            choices = [suggestion for model_suggestions in self.unicode_suggestions for suggestion, features in model_suggestions.items() if features['encoded_string_frequency'] == 1 and len(features['error_cells']) >= threshold]
            if len(choices) == 1:
                choice = choices[0]

        return choice


@dataclass
class ValueSuggestions:
    """A class to hold the suggestions generated by the Value Feature-Generator."""
    cell: Tuple[int, int]
    suggestions: Suggestions

    @property
    def identity_suggestions(self) -> List[Dict[str, Suggestions]]:
        return [x for x in self.suggestions if x.get('encoding', '') == 'identity']

    @property
    def n_identity_suggestions(self) -> int:
        return sum([len(suggestions) for suggestions in self.identity_suggestions])

    @property
    def unicode_suggestions(self) -> List[Dict[str, Suggestions]]:
        return [x for x in self.suggestions if x.get('encoding', '') == 'unicode']

    @property
    def n_unicode_suggestions(self) -> int:
        return sum([len(suggestions) for suggestions in self.unicode_suggestions])

    def certain_model_type_indices_and_suggestions(self, feature: str) -> Tuple[List[int], List[str]]:
        """Index of model types that make a certain suggestion."""
        indices = []
        certain_suggestions = []
        for i, model_suggestions in enumerate(self.suggestions):
            for suggestion, features in model_suggestions.items():
                if features[feature] == 1:
                    indices.append(i)
                    certain_suggestions.append(suggestion)
        return indices, certain_suggestions

    def n_certain_suggestions(self, feature: str) -> int:
        """Number of suggestions with probability 1.0"""
        return sum([1 for suggestion in self.suggestions if suggestion.get(feature, 0) == 1.0])

    def n_certain_suggestions_no_swap(self, feature: str) -> int:
        """Number of suggestions with probability 1.0 that aren't a swap rule."""
        return sum([1 for suggestion in self.suggestions if suggestion.get(feature, 0) == 1.0
                    and suggestion.get('rule', 'swap') != 'swap'])

    def get_certain_suggestions(self, feature: str) -> List:
        """Return all certain suggestions."""
        return [suggestion for suggestion in self.suggestions if suggestion.get(feature, 0) == 1.0]

    def n_certain_unicode_suggestions(self, feature: str) -> int:
        """Number of unicode suggestions with probability 1.0"""
        return sum([1 for suggestion in self.unicode_suggestions if suggestion.get(feature, 0) == 1.0])

    def n_certain_unicode_suggestions_no_swap(self, feature: str) -> int:
        """Number of unicode suggestions with probability 1.0 that are no swap operation."""
        return sum([1 for suggestion in self.unicode_suggestions if suggestion.get(feature, 0) == 1.0
                    and suggestion.get('rule', 'swap') != 'swap'])

    def n_certain_identity_suggestions(self, feature: str) -> int:
        """Number of identity suggestions with probability 1.0"""
        return sum([1 for suggestion in self.identity_suggestions if suggestion.get(feature, 0) == 1.0])

    def n_certain_identity_suggestions_no_swap(self, feature: str) -> int:
        """Number of identity suggestions with probability 1.0 that are no swap operation.s"""
        return sum([1 for suggestion in self.identity_suggestions if suggestion.get(feature, 0) == 1.0
                    and suggestion.get('rule', 'swap') != 'swap'])

    def rule_based_suggestion_v1(self, d) -> Union[str, None]:
        """
        Cleaning heuristic to determine the best rule-based suggestion. Documentation on this can be found in
        the experiment from 2022W38.
        """
        if self.n_certain_suggestions('relative_string_frequency') == 0:  # No certain suggestion at all.
            return None

        if self.n_certain_suggestions('relative_string_frequency') == 1:  # Use the one certain suggestion.
            choice = [suggestion for model_suggestions in self.suggestions for suggestion, features in model_suggestions.items() if features['relative_string_frequency'] == 1]
            choice = choice[0]

        elif self.n_certain_unicode_suggestions('relative_string_frequency') == 1:  # Use the one certain unicode-encoded suggestion.
            # Das funktioniert in der Praxis nicht perfekt. Ich bekomme auf rayyan z.B. "1/13" als Vorschlag, obwohl ich
            # einen datestring %m/%d/%y erwarte.
            choice = [suggestion for model_suggestions in self.unicode_suggestions for suggestion, features in model_suggestions.items()
                      if features['relative_string_frequency'] == 1]
            choice = choice[0]

        else:  # sum up the probabilities of both encodings of all certain corrections and take the max.
            suggestion_sums = {}
            indices, suggestions = self.certain_model_type_indices_and_suggestions('relative_string_frequency')
            for i, s in zip(indices, suggestions):
                if i % 2 == 0:
                    corresponding_index = i + 1
                else:
                    corresponding_index = i - 1
                corresponding_features = self.suggestions[corresponding_index].get(s, {})
                corresponding_score = corresponding_features.get('relative_string_frequency', 0)
                if suggestion_sums.get(s) is None:
                    suggestion_sums[s] = self.suggestions[i][s]['relative_string_frequency'] + corresponding_score
                else:
                    suggestion_sums[s] += self.suggestions[i][s]['relative_string_frequency'] + corresponding_score
            choice = max(suggestion_sums, key=suggestion_sums.get)
        return choice

    def rule_based_suggestion_v3(self, d) -> Union[str, None]:
        choice = None
        if self.n_certain_suggestions('relative_string_frequency') == 0:  # No certain suggestion at all.
            return choice

        if self.n_certain_suggestions('relative_string_frequency') == 1:  # Use the one certain suggestion.
            choice = [suggestion for model_suggestions in self.suggestions for suggestion, features in model_suggestions.items() if features['relative_string_frequency'] == 1]
            choice = choice[0]

        elif self.n_certain_unicode_suggestions('relative_string_frequency') == 1:  #  Use the one certain unicode-encoded suggestion.
            # Das funktioniert in der Praxis nicht perfekt. Ich bekomme auf rayyan z.B. "1/13" als Vorschlag, obwohl ich
            # einen datestring %m/%d/%y erwarte.
            choice = [suggestion for model_suggestions in self.unicode_suggestions for suggestion, features in model_suggestions.items() if features['relative_string_frequency'] == 1]
            choice = choice[0]
        return choice

    def rule_based_suggestion_v4(self) -> Union[str, None]:
        choice = None
        threshold = 3

        if self.n_certain_suggestions('relative_string_frequency') == 0:  # No certain suggestion at all.
            return choice

        if self.n_certain_suggestions_no_swap('relative_string_frequency') == 1:  # Use the one certain suggestion, if it was generated from >= 3 user inputs.
            certain_choices = [sug for sug in self.suggestions if sug.get('relative_string_frequency', 0) == 1.0 and sug.get('rule', 'swap') != 'swap']
            certain_above_threshold = [sug for sug in certain_choices if len(sug.get('error_cells', [])) >= threshold]
            if len(certain_above_threshold) == 1:
                choice = certain_above_threshold[0]

        elif self.n_certain_unicode_suggestions_no_swap('relative_string_frequency') == 1:  #  Use the one certain unicode-encoded suggestion, if it was generated from >= inputs.
            certain_choices = [sug for sug in self.unicode_suggestions if sug.get('relative_string_frequency', 0) == 1.0 and sug.get('rule', 'swap') != 'swap']
            certain_above_threshold = [sug for sug in certain_choices if len(sug.get('error_cells', 0)) >= threshold]

            if len(certain_above_threshold) == 1:
                choice = certain_above_threshold[0]

        if choice is not None and self.cell[1] == 5:
            a = 1
            # TODO continue debugging. In dieser Zeile wird nur Blödsinn vorgeshclagen. Zeilen 4 und 8 werden hingegen
            # prima korrigiert.
            # Debugging scheint mir der falsche Ansatz. Ich vermute einen

        return choice
